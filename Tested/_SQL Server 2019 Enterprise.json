{"status":{},"contains_secrets":true,"product_version":"3.1.0","spec":{"description":"**SQL Server 2019 Enterprise Edition on Windows 2019 Datacenter **","resources":{"client_attrs":{},"service_definition_list":[{"singleton":false,"action_list":[{"description":"System action for creating an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Service"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"17083d4d_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"9a7427c7_runbook","main_task_local_reference":{"kind":"app_task","name":"17083d4d_dag"},"variable_list":[]},"name":"action_create"},{"description":"System action for deleting an application. Deletes created VMs as well","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Service"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"ada7b60e_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"a65f742a_runbook","main_task_local_reference":{"kind":"app_task","name":"ada7b60e_dag"},"variable_list":[]},"name":"action_delete"},{"description":"System action for starting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Service"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"b1c9fdf6_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"7bbf1aef_runbook","main_task_local_reference":{"kind":"app_task","name":"b1c9fdf6_dag"},"variable_list":[]},"name":"action_start"},{"description":"System action for stopping an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Service"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"d5da1112_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"5b9a3a3c_runbook","main_task_local_reference":{"kind":"app_task","name":"d5da1112_dag"},"variable_list":[]},"name":"action_stop"},{"description":"System action for restarting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Service"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"99d2102d_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"9f497d89_runbook","main_task_local_reference":{"kind":"app_task","name":"99d2102d_dag"},"variable_list":[]},"name":"action_restart"}],"depends_on_list":[],"name":"Service","port_list":[],"tier":"","variable_list":[],"description":""}],"substrate_definition_list":[{"description":"","action_list":[{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"VM1"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"9a175797_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"f0a64884_runbook","main_task_local_reference":{"kind":"app_task","name":"9a175797_dag"},"variable_list":[]},"name":"pre_action_create"},{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"VM1"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"3475e62d_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"9a5cf839_runbook","main_task_local_reference":{"kind":"app_task","name":"3475e62d_dag"},"variable_list":[]},"name":"post_action_delete"}],"type":"AHV_VM","name":"VM1","readiness_probe":{"connection_type":"POWERSHELL","retries":"10","connection_protocol":"http","connection_port":5985,"address":"@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@","delay_secs":"120","disable_readiness_probe":false,"login_credential_local_reference":{"kind":"app_credential","name":"WindowsAdmin"}},"editables":{"create_spec":{"resources":{"nic_list":{"0":{"subnet_reference":true}},"serial_port_list":{},"num_vcpus_per_socket":true,"memory_size_mib":true,"boot_config":true,"disk_list":true}}},"os_type":"Windows","create_spec":{"name":"@@{HOST_NAME}@@","resources":{"nic_list":[{"nic_type":"NORMAL_NIC","ip_endpoint_list":[],"network_function_chain_reference":null,"network_function_nic_type":"INGRESS","mac_address":"","subnet_reference":{"kind":"subnet","type":"","name":"","uuid":"dbbe3e44-291e-495c-9192-b70a6b163250"},"type":""}],"serial_port_list":[],"guest_tools":null,"num_vcpus_per_socket":2,"num_sockets":2,"gpu_list":[],"memory_size_mib":8192,"parent_reference":null,"hardware_clock_timezone":"","guest_customization":{"cloud_init":null,"type":"","sysprep":{"is_domain":false,"install_type":"PREPARED","domain_credential_reference":null,"domain":"","dns_ip":"","dns_search_path":"","unattend_xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<unattend xmlns=\"urn:schemas-microsoft-com:unattend\">\n  <settings pass=\"specialize\">\n     <component xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\">\n        <ComputerName>@@{HOST_NAME}@@<\/ComputerName>\n        <RegisteredOrganization>Nutanix, Inc.<\/RegisteredOrganization>\n        <RegisteredOwner><\/RegisteredOwner>\n        <TimeZone>Central Standard Time<\/TimeZone>\n     <\/component>\n     <component xmlns=\"\" name=\"Microsoft-Windows-TerminalServices-LocalSessionManager\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" processorArchitecture=\"amd64\">\n        <fDenyTSConnections>false<\/fDenyTSConnections>\n     <\/component>\n     <component xmlns=\"\" name=\"Microsoft-Windows-TerminalServices-RDP-WinStationExtensions\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" processorArchitecture=\"amd64\">\n        <UserAuthentication>0<\/UserAuthentication>\n     <\/component>\n     <component xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" name=\"Networking-MPSSVC-Svc\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\">\n        <FirewallGroups>\n           <FirewallGroup wcm:action=\"add\" wcm:keyValue=\"RemoteDesktop\">\n              <Active>true<\/Active>\n              <Profile>all<\/Profile>\n              <Group>@FirewallAPI.dll,-28752<\/Group>\n           <\/FirewallGroup>\n        <\/FirewallGroups>\n     <\/component>\n  <\/settings>\n  <settings pass=\"oobeSystem\">\n     <component xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\">\n        <UserAccounts>\n           <AdministratorPassword>\n              <Value>@@{WindowsAdmin.secret}@@<\/Value>\n              <PlainText>true<\/PlainText>\n           <\/AdministratorPassword>\n        <\/UserAccounts>\n        <AutoLogon>\n           <Password>\n              <Value>@@{WindowsAdmin.secret}@@<\/Value>\n              <PlainText>true<\/PlainText>\n           <\/Password>\n           <Enabled>true<\/Enabled>\n           <Username>Administrator<\/Username>\n        <\/AutoLogon>\n\t\t<FirstLogonCommands>\n           <SynchronousCommand wcm:action=\"add\">\n              <CommandLine>cmd.exe \/c netsh firewall add portopening TCP 5985 \"Port 5985\"<\/CommandLine>\n              <Description>Win RM port open<\/Description>\n              <Order>1<\/Order>\n              <RequiresUserInput>true<\/RequiresUserInput>\n           <\/SynchronousCommand>\n           <SynchronousCommand wcm:action=\"add\">\n              <CommandLine>powershell -Command \"Enable-PSRemoting -SkipNetworkProfileCheck -Force\"<\/CommandLine>\n              <Description>Enable PS-Remoting<\/Description>\n              <Order>2<\/Order>\n              <RequiresUserInput>true<\/RequiresUserInput>\n           <\/SynchronousCommand>\n           <SynchronousCommand wcm:action=\"add\">\n              <CommandLine>powershell -Command \"Set-ExecutionPolicy -ExecutionPolicy RemoteSigned\"<\/CommandLine>\n              <Description>Enable Remote-Signing<\/Description>\n              <Order>3<\/Order>\n              <RequiresUserInput>false<\/RequiresUserInput>\n            <\/SynchronousCommand>\n            <SynchronousCommand wcm:action=\"add\">\n               <Order>4<\/Order>\n               <CommandLine>REG ADD HKLM\\System\\CurrentControlSet\\Control\\Network\\NewNetworkWindowOff \/F<\/CommandLine>\n               <Description>No New Network Block<\/Description>\n               <RequiresUserInput>true<\/RequiresUserInput>\n            <\/SynchronousCommand>\n        <\/FirstLogonCommands>\n        <OOBE>\n           <HideEULAPage>true<\/HideEULAPage>\n           <SkipMachineOOBE>true<\/SkipMachineOOBE>\n        <\/OOBE>\n     <\/component>\n     <component xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" name=\"Microsoft-Windows-International-Core\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\">\n        <InputLocale>en-US<\/InputLocale>\n        <SystemLocale>en-US<\/SystemLocale>\n        <UILanguageFallback>en-us<\/UILanguageFallback>\n        <UILanguage>en-US<\/UILanguage>\n           <UserLocale>en-US<\/UserLocale>\n     <\/component>\n  <\/settings>\n<\/unattend>","type":""}},"power_state":"ON","type":"","account_uuid":"e98ba8d9-fb36-4f5c-aaff-3348bf2fd79a","boot_config":{"boot_device":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"}},"type":"","boot_type":"UEFI","mac_address":""},"disk_list":[{"data_source_reference":{"kind":"image","type":"","name":"SQL Server 2019 - Disk 1","uuid":"03b79a09-ebe1-42f8-b3ba-f7fb9d49ed45"},"type":"","disk_size_mib":0,"volume_group_reference":null,"device_properties":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"},"device_type":"DISK"}},{"data_source_reference":null,"type":"","disk_size_mib":10240,"volume_group_reference":null,"device_properties":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"IDE"},"device_type":"CDROM"}},{"data_source_reference":{"kind":"image","type":"","name":"SQL Server 2019 - Disk 2","uuid":"302c4438-a424-466d-b01d-57af681e05d7"},"type":"","disk_size_mib":0,"volume_group_reference":null,"device_properties":{"type":"","disk_address":{"type":"","device_index":1,"adapter_type":"SCSI"},"device_type":"DISK"}},{"data_source_reference":null,"type":"","disk_size_mib":10240,"volume_group_reference":null,"device_properties":{"type":"","disk_address":{"type":"","device_index":2,"adapter_type":"SCSI"},"device_type":"DISK"}},{"data_source_reference":null,"type":"","disk_size_mib":10240,"volume_group_reference":null,"device_properties":{"type":"","disk_address":{"type":"","device_index":3,"adapter_type":"SCSI"},"device_type":"DISK"}},{"data_source_reference":null,"type":"","disk_size_mib":10240,"volume_group_reference":null,"device_properties":{"type":"","disk_address":{"type":"","device_index":4,"adapter_type":"SCSI"},"device_type":"DISK"}}]},"availability_zone_reference":null,"backup_policy":null,"type":"","cluster_reference":null,"categories":{"OSType":"Windows","AppFamily":"Databases","OS_Vendor":"Microsoft","AppType":"Microsoft_SQL","Windows_Version":"2019"}},"variable_list":[]}],"credential_definition_list":[{"username":"administrator","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":true,"secret_reference":{}},"value":"2VrxbVmSX\/2ybMWSXDgIIRkjkW\/DiMhN6B4E5IkZ4fPfXZx+Dv0KLKg=:utf-8"},"name":"WindowsAdmin"},{"username":"admin","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":true,"secret_reference":{}},"value":"wsO7WGr+u7eH5J2ttBi54GSiTX\/pZb5O3ovQiOjLHldWsDvpLuBnq0Dyqv1Y:utf-8"},"name":"PcAdmin"}],"package_definition_list":[{"description":"","action_list":[],"type":"DEB","service_local_reference_list":[{"kind":"app_service","name":"Service"}],"name":"Package1","version":"","options":{"install_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Package1"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"Create and Format Partitions for SQL Server"},{"kind":"app_task","name":"Eject CDRom"},{"kind":"app_task","name":"Install SQL Server 2019"},{"kind":"app_task","name":"Create Firewall Rules"},{"kind":"app_task","name":"Configure SQL Server Agent"},{"kind":"app_task","name":"Install SQL Server Management Studio"},{"kind":"app_task","name":"Restart Computer"},{"kind":"app_task","name":"Wait for Reboot"},{"kind":"app_task","name":"Mount NGT"},{"kind":"app_task","name":"Enable NGT"}],"name":"6f065a87_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"Create and Format Partitions for SQL Server"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Install SQL Server 2019"}},{"from_task_reference":{"kind":"app_task","name":"Install SQL Server 2019"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Install SQL Server Management Studio"}},{"from_task_reference":{"kind":"app_task","name":"Install SQL Server 2019"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Create Firewall Rules"}},{"from_task_reference":{"kind":"app_task","name":"Install SQL Server 2019"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Configure SQL Server Agent"}},{"from_task_reference":{"kind":"app_task","name":"Install SQL Server Management Studio"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Restart Computer"}},{"from_task_reference":{"kind":"app_task","name":"Restart Computer"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Wait for Reboot"}},{"from_task_reference":{"kind":"app_task","name":"Wait for Reboot"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Mount NGT"}},{"from_task_reference":{"kind":"app_task","name":"Mount NGT"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Enable NGT"}},{"from_task_reference":{"kind":"app_task","name":"Create and Format Partitions for SQL Server"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Eject CDRom"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Service"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Create and Format Partitions for SQL Server","attrs":{"exit_status":[],"script":"$start_time = Get-Date\n\n# Bring all the drives online\n$disks = get-disk | where-object {$_.operationalstatus -eq \"Offline\"}\nforeach ($disk in $disks) \n{\n    $disk | set-disk -isoffline $false \n    $disk | set-disk -isReadOnly $false\n}\n\n# Initialize and Format Drive L - LOGS\nInitialize-Disk -Number 2 -PartitionStyle GPT -PassThru -ErrorAction SilentlyContinue\nNew-Partition -DiskNumber 2 -DriveLetter L -UseMaximumSize\nFormat-Volume -DriveLetter L -FileSystem NTFS -AllocationUnitSize 65536 -NewFileSystemLabel \"SQL_LOGS\" -Confirm:$false\n\n# Initialize and Format Drive S - SQL DATA\nInitialize-Disk -Number 3 -PartitionStyle GPT -PassThru -ErrorAction SilentlyContinue\nNew-Partition -DiskNumber 3 -DriveLetter S -UseMaximumSize\nFormat-Volume -DriveLetter S -FileSystem NTFS -AllocationUnitSize 65536 -NewFileSystemLabel \"SQL_DATA\" -Confirm:$false\n\n# Initialize and Format Drive T - TEMP DB\nInitialize-Disk -Number 4 -PartitionStyle GPT -PassThru -ErrorAction SilentlyContinue\nNew-Partition -DiskNumber 4 -DriveLetter T -UseMaximumSize\nFormat-Volume -DriveLetter T -FileSystem NTFS -AllocationUnitSize 65536 -NewFileSystemLabel \"SQL_TEMPDB\" -Confirm:$false\n\n","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"WindowsAdmin"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Service"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Eject CDRom","attrs":{"exit_status":[],"script":"$sh = New-Object -ComObject \"Shell.Application\"\r\n$sh.Namespace(17).Items() | \r\n    Where-Object { $_.Type -eq \"CD Drive\" } | \r\n        foreach { $_.InvokeVerb(\"Eject\") }","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"WindowsAdmin"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Service"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Install SQL Server 2019","attrs":{"exit_status":[],"script":"$SA_PASS=\"@@{SA_PASSWORD}@@\"\n\nInvoke-Command {\n\tC:\\SQL_Server_Enterprise_2019\\setup.exe \/Q \/SAPWD=$SA_PASS \/ConfigurationFile=C:\\SQL_Server_Enterprise_2019\\custom\\Post_Image_ConfigurationFile.ini \/SQLSVCPASSWORD=$SA_PASS \/IACCEPTSQLSERVERLICENSETERMS\n}","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"WindowsAdmin"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Service"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Create Firewall Rules","attrs":{"exit_status":[],"script":"# Enable Firewall Rules for SQL Server\nNew-NetFirewallRule -DisplayName \"SQL Server\" -Direction Inbound -Protocol TCP -LocalPort 1433 -Action allow\nNew-NetFirewallRule -DisplayName \"SQL Admin Connection\" -Direction Inbound -Protocol TCP -LocalPort 1434 -Action allow\nNew-NetFirewallRule -DisplayName \"SQL Database Management\" -Direction Inbound -Protocol UDP -LocalPort 1434 -Action allow\nNew-NetFirewallRule -DisplayName \"SQL Service Broker\" -Direction Inbound -Protocol TCP -LocalPort 4022 -Action allow\nNew-NetFirewallRule -DisplayName \"SQL Debugger\/RPC\" -Direction Inbound -Protocol TCP -LocalPort 135 -Action allow\nNew-NetFirewallRule -DisplayName \"SQL Browser\" -Direction Inbound -Protocol TCP -LocalPort 2382 -Action allow\n","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"WindowsAdmin"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Service"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Configure SQL Server Agent","attrs":{"exit_status":[],"script":"get-service SQLSERVERAGENT | set-service -startuptype automatic","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"WindowsAdmin"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Service"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Install SQL Server Management Studio","attrs":{"exit_status":[],"script":"# SSMS install\n#\n\nStart-Process -FilePath \u201cc:\\SQL_Server_Enterprise_2019\\SSMS-Setup-ENU.exe\" -ArgumentList \"\/install \/quiet\" -Wait -Verb RunAs","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"WindowsAdmin"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Service"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Restart Computer","attrs":{"exit_status":[],"script":"restart-computer -force","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"WindowsAdmin"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Service"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Wait for Reboot","attrs":{"type":"","interval_secs":30},"timeout_secs":"0","type":"DELAY","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Service"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Mount NGT","attrs":{"script":"# region headers\n# escript-template v20190523 \/ stephane.bourdeaud@nutanix.com\n# * author:       stephane.bourdeaud@nutanix.com\n# * version:      2019\/06\/04\n# task_name:      PcMountNgt\n# description:    This script mounts the Nutanix Guest Tools on the AHV\n#                 virtual machine provisioned by Calm.\n# endregion\n\n# region capture Calm macros\npc_user = \"@@{PcAdmin.username}@@\"\npc_password = \"@@{PcAdmin.secret}@@\"\nvm_uuid = \"@@{platform.metadata.uuid}@@\"\ncluster_uuid = \"@@{platform.status.cluster_reference.uuid}@@\"\npc_ip = \"@@{pc_ip}@@\"\n# endregion\n\n# region prepare variables\ncluster_uuid_url = \"https:\/\/{}:9440\/api\/nutanix\/v3\/clusters\/{}\".format(\n    pc_ip,\n    cluster_uuid\n)\nheaders = {\n    'Accept': 'application\/json',\n    'Content-Type': 'application\/json; charset=UTF-8'\n}\n# endregion\n\n\n# region functions\ndef process_request(url, method, user, password, headers, payload=None):\n    if payload is not None:\n        payload = json.dumps(payload)\n    r = urlreq(\n            url,\n            verb=method,\n            auth=\"BASIC\",\n            user=user,\n            passwd=password,\n            params=payload,\n            verify=False,\n            headers=headers\n        )\n    return r\n# endregion\n\nprint(\"Mounting NGT...\")\n\n# region get the AHV cluster IP address\nmethod = 'GET'\nurl = cluster_uuid_url\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, pc_user, pc_password, headers)\nresult = json.loads(resp.content)\n\nif resp.ok:\n    # print the content of the response\n    print(json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    cluster_ip = result[\"status\"][\"resources\"][\"network\"][\"external_ip\"]\n    print(\"The AHV cluster IP address is {}\".format(cluster_ip))\nelse:\n    # print the content of the response (which should have the error message)\n    print(\"Request failed\", json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    print(\"Headers: {}\".format(headers))\n    exit(1)\n# endregion\n\n# region mount the NGT image (to regenerate the certificates)\nmethod = 'POST'\nurl = \"https:\/\/{}:9440\/PrismGateway\/services\/rest\/v1\/vms\/{}\/guest_tools\/mount\".format(\n    cluster_ip,\n    vm_uuid\n)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, pc_user, pc_password, headers)\nresult = json.loads(resp.content)\n\nif resp.ok:\n    # print the content of the response\n    print(json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    print(\"NGT mounted\")\n    exit(0)\nelse:\n    # print the content of the response (which should have the error message)\n    print(\"Request failed\", json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    print(\"Headers: {}\".format(headers))\n    exit(1)\n# endregion\n","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Service"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Enable NGT","attrs":{"script":"# region headers\r\n# escript-template v20190523 \/ stephane.bourdeaud@nutanix.com\r\n# * author:       salaheddine.gassim@nutanix.com, stephane.bourdeaud@nutanix.com\r\n# * version:      2019\/06\/04\r\n# task_name:      EnableNgt\r\n# description:    This script enables the Nutanix Guest Tools on the AHV\r\n#                 virtual machine provisioned by Calm. NGT should already be\r\n#                 installed inside the VM template.  You will need to restart\r\n#                 the NGT service in guest using \"systemctl status\r\n#                 ngt_guest_agent.service\" for a Linux VM.\r\n# endregion\r\n\r\n# region capture Calm macros\r\npc_user = \"@@{PcAdmin.username}@@\"\r\npc_password = \"@@{PcAdmin.secret}@@\"\r\nvm_uuid = \"@@{platform.metadata.uuid}@@\"\r\ncluster_uuid = \"@@{platform.status.cluster_reference.uuid}@@\"\r\npc_ip = \"@@{pc_ip}@@\"\r\n# endregion\r\n\r\n# region prepare variables\r\nvm_uuid_url = \"https:\/\/\" + pc_ip + \":9440\/api\/nutanix\/v3\/vms\/\" + vm_uuid\r\ncluster_uuid_url = \"https:\/\/\" + pc_ip + \":9440\/api\/nutanix\/v3\/clusters\/\" + cluster_uuid\r\nheaders = {\r\n    'Accept': 'application\/json', \r\n    'Content-Type': 'application\/json; charset=UTF-8'\r\n}\r\n# endregion\r\n\r\n# region functions\r\ndef process_request(url, method, user, password, headers, payload=None):\r\n   if (payload != None):\r\n       payload = json.dumps(payload)\r\n   r = urlreq(\r\n       url, \r\n       verb=method, \r\n       auth=\"BASIC\", \r\n       user=user, \r\n       passwd=password, \r\n       params=payload, \r\n       verify=False, \r\n       headers=headers\r\n    )\r\n   return r\r\n# endregion\r\n\r\nprint \"Enabling NGT...\"\r\n\r\n# region get the AHV cluster IP address\r\nmethod = 'GET'\r\nurl = cluster_uuid_url\r\nprint(\"Making a {} API call to {}\".format(method, url))\r\nresp = process_request(url, method, pc_user, pc_password, headers)\r\nresult = json.loads(resp.content)\r\n\r\nif resp.ok:\r\n    # print the content of the response\r\n    print(json.dumps(\r\n        json.loads(resp.content),\r\n        indent=4\r\n    ))\r\n    cluster_ip = result[\"status\"][\"resources\"][\"network\"][\"external_ip\"]\r\n    print(\"The AHV cluster IP address is {}\".format(cluster_ip))\r\nelse:\r\n    # print the content of the response (which should have the error message)\r\n    print(\"Request failed\", json.dumps(\r\n        json.loads(resp.content),\r\n        indent=4\r\n    ))\r\n    print(\"Headers: {}\".format(headers))\r\n    print(\"Payload: {}\".format(payload))\r\n    exit(1)\r\n# endregion\r\n\r\n# region mount the NGT image (to regenerate the certificates)\r\nmethod = 'POST'\r\nurl = \"https:\/\/\"+ cluster_ip + \":9440\/PrismGateway\/services\/rest\/v1\/vms\/\" + vm_uuid + \"\/guest_tools\/mount\"\r\nprint(\"Making a {} API call to {}\".format(method, url))\r\nresp = process_request(url, method, pc_user, pc_password,headers)\r\nif resp.content:\r\n    result = json.loads(resp.content)\r\nelse:\r\n    print(\"Request did not return any content.\")\r\n\r\nif resp.ok:\r\n    print('Status code: {}'.format(resp.status_code))\r\n    # print the content of the response\r\n    if resp.content:\r\n        print(json.dumps(\r\n            json.loads(resp.content),\r\n            indent=4\r\n        ))\r\n        print \"NGT mounted\"\r\nelse:\r\n    print('Status code: {}'.format(resp.status_code))\r\n    # print the content of the response (which should have the error message)\r\n    if resp.content:\r\n        print(\"Request failed\", json.dumps(\r\n            json.loads(resp.content),\r\n            indent=4\r\n        ))\r\n    print(\"Headers: {}\".format(headers))\r\n    print(\"Payload: {}\".format(payload))\r\n    exit(1)\r\n# endregion\r\n\r\n# region enable guest tools for the VM\r\nmethod = 'POST'\r\nurl = \"https:\/\/\"+ cluster_ip + \":9440\/PrismGateway\/services\/rest\/v1\/vms\/\" + cluster_uuid + \"::\" + vm_uuid + \"\/guest_tools\/\"\r\nprint(\"Making a {} API call to {}\".format(method, url))\r\npayload = {\r\n    \"vmUuid\": cluster_uuid + \"::\" + vm_uuid,\r\n    \"enabled\": \"true\",\r\n    \"applications\": {\r\n        \"file_level_restore\": \"false\",\r\n        \"vss_snapshot\": \"true\"\r\n    }\r\n}\r\nresp = process_request(url, method, pc_user, pc_password,headers, payload)\r\nif resp.content:\r\n    result = json.loads(resp.content)\r\n\r\nif resp.ok:\r\n    print('Status code: {}'.format(resp.status_code))\r\n    # print the content of the response\r\n    if resp.content:\r\n        print(json.dumps(\r\n            json.loads(resp.content),\r\n            indent=4\r\n        ))\r\n        print \"NGT enabled\"\r\n    exit(0)\r\nelse:\r\n    print('Status code: {}'.format(resp.status_code))\r\n    # print the content of the response (which should have the error message)\r\n    if resp.content:\r\n        print(\"Request failed\", json.dumps(\r\n            json.loads(resp.content),\r\n            indent=4\r\n        ))\r\n    print(\"Headers: {}\".format(headers))\r\n    print(\"Payload: {}\".format(payload))\r\n    exit(1)\r\n# endregion","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"254e3c69_runbook","main_task_local_reference":{"kind":"app_task","name":"6f065a87_dag"},"variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"pc_ip","value":"10.10.10.35","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}]},"type":"","uninstall_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Package1"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"0f333e31_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"fe17e9a9_runbook","main_task_local_reference":{"kind":"app_task","name":"0f333e31_dag"},"variable_list":[]}},"variable_list":[]}],"app_profile_list":[{"deployment_create_list":[{"type":"GREENFIELD","action_list":[],"name":"163624b8_deployment","min_replicas":"1","default_replicas":"1","depends_on_list":[],"published_service_local_reference_list":[],"max_replicas":"1","package_local_reference_list":[{"kind":"app_package","name":"Package1"}],"substrate_local_reference":{"kind":"app_substrate","name":"VM1"},"variable_list":[],"description":""}],"description":"","action_list":[{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Service"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"Stop SQL Server Service"}],"name":"16d74a9b_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Service"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Stop SQL Server Service","attrs":{"exit_status":[],"script":"#function to stop all the sql server services on a given server\n \nfunction Stop-AllSQLServerServices\n{\n    [cmdletbinding()]\n    Param([string]$Server\n    , [bool]$StopSQL=$true\n    , [bool]$StopAgent=$true\n    , [bool]$StopSSRS=$true\n    , [bool]$StopBrowser=$true\n    , [bool]$StopSSIS=$true\n    , [bool]$StopTextDaemon=$true\n    , [bool]$StopSSAS=$true)\n \n    #Get all the services on the server\n    $Services = get-service -ComputerName $Server\n \n    if($StopAgent -eq $true)\n    {\n        #check the SQL Server Agent services\n        write-verbose &quot;Checking Agent Services&quot;\n \n        #get all named agent instances and the default instance\n        ForEach ($SQLAgentService in $Services | where-object {$_.Name -match &quot;SQLSERVERAGENT&quot; -or $_.Name -like &quot;SQLAgent$*&quot;})\n        {\n            #check the servcie running status\n            if($SQLAgentService.status -eq &quot;Running&quot;)\n            {\n                #if stopped, start the agent\n                write-verbose &quot;Stopping SQL Server Agent $($SQLAgentService.Name)&quot;\n                $SQLAgentService.Stop()\n            }\n            else\n            {\n                #write comfort message that the service is already running\n                write-verbose &quot;SQL Agent Service $($SQLAgentService.Name) is already stopped.&quot;\n            }\n        }\n    }\n    else\n    {\n        write-verbose &quot;Skipping checking Agent services&quot;\n    }\n \n    if($StopSSRS -eq $true)\n    {\n        #check the SSRS services\n        write-verbose &quot;Checking SSRS Services&quot;\n \n        #get all reporting service services\n        ForEach ($SSRSService in $Services | where-object {$_.Name -match &quot;ReportServer&quot;})\n        {\n            #check the status of the service\n            if($SSRSService.status -eq &quot;Running&quot;)\n            {\n                #if stopped, start the agent\n                write-verbose &quot;Stopping SSRS Service $($SSRSService.Name)&quot;\n                $SSRSService.Stop()\n            }\n            else\n            {\n                #write comfort message that the service is already running\n                write-verbose &quot;SSRS Service $($SSRSService.Name) is already stopped.&quot;\n            }\n        }\n    }\n    else\n    {\n        write-verbose &quot;Skipping checking SSRS services&quot;\n    }\n \n    if($StopSSIS -eq $True)\n    {\n \n        #get the SSIS service (should only be one)\n        write-verbose &quot;Checking SSIS Service&quot;\n \n        #get all services, even though there should only be one\n        ForEach ($SSISService in $Services | where-object {$_.Name -match &quot;MsDtsServer*&quot;})\n        {\n            #check the status of the service\n            if($SSISService.Status -eq &quot;Running&quot;)\n            {\n                #if its stopped, start it\n                write-verbose &quot;Stopping SSIS Service $($SSISService.Name)&quot;\n                $SSISService.Stop()\n            }\n            else\n            {\n                #write comfort message\n                write-verbose &quot;SSIS $($SSISService.Name) already stopped&quot;\n            }\n        }\n    }\n    else\n    {\n        write-verbose &quot;Skipping checking SSIS services&quot;\n    }\n \n    if ($StopBrowser -eq $true)\n    {\n \n        #Check the browser, start it if there are named instances on the box\n        write-verbose &quot;Checking SQL Browser service&quot;\n \n        #get the browser service\n        $BrowserService = $services | where-object {$_.Name -eq &quot;SQLBrowser&quot;}\n \n        if($BrowserService.Status -eq &quot;Running&quot;)\n        {\n            #if its stopped start it\n            write-verbose &quot;Stopping Browser Server $($BrowserService.Name)&quot;\n            $BrowserService.Stop()\n        }\n        else\n        {\n            #write comfort message\n            write-verbose &quot;Browser service $($BrowserService.Name) is already stopped&quot;\n        }\n    }\n    else\n    {\n        write-verbose &quot;Skipping checking Browser service&quot;\n    }\n \n    if($StopTextDaemon -eq $True)\n    {\n \n        # Start the full text daemons\n        write-verbose &quot;Checking SQL Full Text Daemons&quot;\n \n        ForEach($TextService in $Services | where-object {$_.Name -match &quot;MSSQLFDLauncher&quot;})\n        {\n            #check the service status\n            if ($TextService.Status -eq &quot;Running&quot;)\n            {\n                #start the service\n                write-verbose &quot;Stopping Full Text Service $($TextService.Name)&quot;\n                $TextService.Stop()\n            }\n            else\n            {\n                write-verbose &quot;Text service $($TextService.Name) is already stopped.&quot;\n            }\n        }\n    }\n    else\n    {\n        write-verbose &quot;Skipping checking Text Daemon services&quot;\n    }\n \n    if($StopSSAS -eq $True)\n    {\n \n        # start the SSAS service\n        write-verbose &quot;Checking SSAS services&quot;\n \n        ForEach($SSASService in $Services | where-object {$_.Name -match &quot;MSSQLServerOLAP&quot;})\n        {\n            #check the service status\n            if ($SSASService.Status -eq &quot;Running&quot;)\n            {\n                #start the service\n                Write-verbose &quot;Stopping SSAS Service $($SSASService.Name)&quot;\n                $SSASService.Stop()\n            }\n            else\n            {\n                write-verbose &quot;SSAS Service $($SSASService.Name) is already stopped.&quot;\n            }\n        }\n    }\n    else\n    {\n        write-verbose &quot;Skipping checking SSAS services&quot;\n    }\n \n     if($StopSQL -eq $true)\n    {\n        #check the SQL Server Engine services\n        write-verbose &quot;Checking SQL Server Engine Services&quot;\n \n        #get all named instances and the default instance\n        foreach ($SQLService in $Services | where-object {$_.Name -match &quot;MSSQLSERVER&quot; -or $_.Name -like &quot;MSSQL$*&quot;})\n        {\n            #Check the service running status\n            if($SQLService.status -eq &quot;Running&quot;)\n            {\n                #if stopped start the SQL Server service\n                write-verbose &quot;Stoppin SQL Server Service $($SQLService.Name)&quot;\n                $SQLService.Stop()\n            }\n            else\n            {\n                #Write comfort message that the service is already running\n                write-verbose &quot;SQL Server Service $($SQLService.Name) is already stopped&quot;\n            }\n        }\n    }\n    else\n    {\n        write-verbose &quot;Skipping checking SQL Engine services&quot;\n    }\n \n}\n \nexport-modulemember -function Stop-AllSQLServerServices","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"WindowsAdmin"}},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"f95e1928_runbook","main_task_local_reference":{"kind":"app_task","name":"16d74a9b_dag"},"variable_list":[]},"name":"Stop SQL Server Services"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Service"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"Start SQL Server Services"}],"name":"7475a2d3_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Service"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Start SQL Server Services","attrs":{"exit_status":[],"script":"#function to start all the sql server services on a given server\n \nfunction Start-AllSQLServerServices\n{\n    [cmdletbinding()]\n    Param([string]$Server\n    , [bool]$StartSQL=$true\n    , [bool]$StartAgent=$true\n    , [bool]$StartSSRS=$true\n    , [bool]$StartBrowser=$true\n    , [bool]$StartSSIS=$true\n    , [bool]$StartTextDaemon=$true\n    , [bool]$StartSSAS=$true)\n \n    #Get all the services on the server\n    $Services = get-service -ComputerName $Server\n \n    if($StartSQL -eq $true)\n    {\n        #check the SQL Server Engine services\n        write-verbose &quot;Checking SQL Server Engine Services&quot;\n \n        #get all named instances and the default instance\n        foreach ($SQLService in $Services | where-object {$_.Name -match &quot;MSSQLSERVER&quot; -or $_.Name -like &quot;MSSQL$*&quot;})\n        {\n            #Check the service running status\n            if($SQLService.status -eq &quot;Stopped&quot;)\n            {\n                #if stopped start the SQL Server service\n                write-verbose &quot;Starting SQL Server Service $($SQLService.Name)&quot;\n                $SQLService.Start()\n            }\n            else\n            {\n                #Write comfort message that the service is already running\n                write-verbose &quot;SQL Server Service $($SQLService.Name) already running&quot;\n            }\n        }\n    }\n    else\n    {\n        write-verbose &quot;Skipping checking SQL Engine services&quot;\n    }\n \n    if($StartAgent -eq $true)\n    {\n        #check the SQL Server Agent services\n        write-verbose &quot;Checking Agent Services&quot;\n \n        #get all named agent instances and the default instance\n        ForEach ($SQLAgentService in $Services | where-object {$_.Name -match &quot;SQLSERVERAGENT&quot; -or $_.Name -like &quot;SQLAgent$*&quot;})\n        {\n            #check the servcie running status\n            if($SQLAgentService.status -eq &quot;Stopped&quot;)\n            {\n                #if stopped, start the agent\n                write-verbose &quot;Starting SQL Server Agent $($SQLAgentService.Name)&quot;\n                $SQLAgentService.Start()\n            }\n            else\n            {\n                #write comfort message that the service is already running\n                write-verbose &quot;SQL Agent Service $($SQLAgentService.Name) already running&quot;\n            }\n        }\n    }\n    else\n    {\n        write-verbose &quot;Skipping checking Agent services&quot;\n    }\n \n    if($StartSSRS -eq $true)\n    {\n        #check the SSRS services\n        write-verbose &quot;Checking SSRS Services&quot;\n \n        #get all reporting service services\n        ForEach ($SSRSService in $Services | where-object {$_.Name -match &quot;ReportServer&quot;})\n        {\n            #check the status of the service\n            if($SSRSService.status -eq &quot;Stopped&quot;)\n            {\n                #if stopped, start the agent\n                write-verbose &quot;Starting SSRS Service $($SSRSService.Name)&quot;\n                $SSRSService.Start()\n            }\n            else\n            {\n                #write comfort message that the service is already running\n                write-verbose &quot;SQL Agent Service $($SSRSService.Name) already running&quot;\n            }\n        }\n    }\n    else\n    {\n        write-verbose &quot;Skipping checking SSRS services&quot;\n    }\n \n    if($StartSSIS -eq $True)\n    {\n \n        #get the SSIS service (should only be one)\n        write-verbose &quot;Checking SSIS Service&quot;\n \n        #get all services, even though there should only be one\n        ForEach ($SSISService in $Services | where-object {$_.Name -match &quot;MsDtsServer*&quot;})\n        {\n            #check the status of the service\n            if($SSISService.Status -eq &quot;Stopped&quot;)\n            {\n                #if its stopped, start it\n                write-verbose &quot;Starting SSIS Service $($SSISService.Name)&quot;\n                $SSISService.Start()\n            }\n            else\n            {\n                #write comfort message\n                write-verbose &quot;SSIS $($SSISService.Name) already running&quot;\n            }\n        }\n    }\n    else\n    {\n        write-verbose &quot;Skipping checking SSIS services&quot;\n    }\n \n    if ($StartBrowser -eq $true)\n    {\n \n        #Check the browser, start it if there are named instances on the box\n        write-verbose &quot;Checking SQL Browser service&quot;\n \n        #check if there are named services\n        if(($services.name -like &quot;MSSQL$*&quot;) -ne $null)\n        {\n            #get the browser service\n            $BrowserService = $services | where-object {$_.Name -eq &quot;SQLBrowser&quot;}\n \n            if($BrowserService.Status -eq &quot;Stopped&quot;)\n            {\n                #if its stopped start it\n                write-verbose &quot;Starting Browser Server $($BrowserService.Name)&quot;\n                $BrowserService.Start()\n            }\n            else\n            {\n                #write comfort message\n                write-verbose &quot;Browser service $($BrowserService.Name) already running&quot;\n            }\n        }\n        else\n        {\n            #if no named instances, we don't care about the browser\n            write-verbose &quot;No named instances so ignoring Browser&quot;\n        }\n    }\n    else\n    {\n        write-verbose &quot;Skipping checking Browser service&quot;\n    }\n \n    if($StartTextDaemon -eq $True)\n    {\n \n        # Start the full text daemons\n        write-verbose &quot;Checking SQL Full Text Daemons&quot;\n \n        ForEach($TextService in $Services | where-object {$_.Name -match &quot;MSSQLFDLauncher&quot;})\n        {\n            #check the service status\n            if ($TextService.Status -eq &quot;Stopped&quot;)\n            {\n                #start the service\n                write-verbose &quot;Starting Full Text Service $($TextService.Name)&quot;\n                $TextService.Start()\n            }\n            else\n            {\n                write-verbose &quot;Text service $($TextService.Name) already running.&quot;\n            }\n        }\n    }\n    else\n    {\n        write-verbose &quot;Skipping checking Text Daemon services&quot;\n    }\n \n    if($StartSSAS -eq $True)\n    {\n \n        # start the SSAS service\n        write-verbose &quot;Checking SSAS services&quot;\n \n        ForEach($SSASService in $Services | where-object {$_.Name -match &quot;MSSQLServerOLAP&quot;})\n        {\n            #check the service status\n            if ($SSASService.Status -eq &quot;Stopped&quot;)\n            {\n                #start the service\n                Write-verbose &quot;Starting SSAS Service $($SSASService.Name)&quot;\n                $SSASService.Start()\n            }\n            else\n            {\n                write-verbose &quot;SSAS Service $($SSASService.Name) already running.&quot;\n            }\n        }\n    }\n    else\n    {\n        write-verbose &quot;Skipping checking SSAS services&quot;\n    }\n}\n \nexport-modulemember -function Start-AllSQLServerServices","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"WindowsAdmin"}},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"6ed862c5_runbook","main_task_local_reference":{"kind":"app_task","name":"7475a2d3_dag"},"variable_list":[]},"name":"Start SQL Server Services"}],"name":"Default","variable_list":[{"val_type":"STRING","is_mandatory":true,"description":"Enter SQL Server Instance ID","data_type":"BASE","type":"LOCAL","name":"INSTANCE_ID","value":"","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"Enter SQL Server Instance Name","data_type":"BASE","type":"LOCAL","name":"INSTANCE_NAME","value":"","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"Enter VM host name","data_type":"BASE","type":"LOCAL","name":"HOST_NAME","value":"","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"Enter a password for the SA account","data_type":"BASE","type":"SECRET","name":"SA_PASSWORD","value":"XeZ1jc9OFNaIUuxZ7CkS2vJLYF3l4JZSbupQIQWonTOhLAYdqGSqdsGMupWo:utf-8","label":"","attrs":{"is_secret_modified":false,"secret_reference":{},"type":"SECRET"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}]}],"published_service_definition_list":[],"default_credential_local_reference":{"kind":"app_credential","name":"WindowsAdmin"},"type":"USER"},"name":"_SQL Server 2019 Enterprise"},"api_version":"3.0","metadata":{"last_update_time":"1607241422530431","kind":"blueprint","spec_version":5,"creation_time":"1607142410201883","categories":{"TemplateType":"Vm"},"name":"_SQL Server 2019 Enterprise"}}